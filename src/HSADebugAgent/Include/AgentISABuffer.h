//==============================================================================
// Copyright (c) 2016 Advanced Micro Devices, Inc. All rights reserved.
//
/// \author AMD Developer Tools
/// \file
/// \brief Functionality to manage the ISA buffers generated by the finalizer
//==============================================================================
#include <string>
#include <vector>

#include "AgentLogging.h"
#include "CommunicationControl.h"

namespace HwDbgAgent
{

/// A class that maintains a single ISA buffer
class AgentISABuffer
{
public:
    AgentISABuffer();

    ~AgentISABuffer();

    /// Check if the kernel name exists in the ISA buffer text
    bool CheckForKernelName(const std::string& kernelName) const;

    HsailAgentStatus PopulateISAFromCodeObj(const size_t size, const void* codeObj);

    /// Populate form the file given
    HsailAgentStatus PopulateISAFromFile(const std::string& filename);

    /// Write the ISA text to a shared mem location provided
    HsailAgentStatus WriteToSharedMem(const int isaBufferShmKey, const size_t m_isaBufferShmSize) const;

private:

    /// Raw buffer
    char* m_pISABufferText;

    /// size of raw buffer
    size_t m_ISABufferLen;

    /// Disable copy constructor
    AgentISABuffer(const AgentISABuffer&);

    /// Disable assignment operator
    AgentISABuffer& operator=(const AgentISABuffer&);

    /// Disassemble the code object and save the ISA
    HsailAgentStatus  DisassembleAMDHsaCod(const size_t size, const void* codeObj);

    /// Check if the amdhsacod exists, by calling "which amdhsacod"
    bool TestForAMDHsaCod();

};

/// Class to control the Active ISA buffers as they are generated by the finalizer.
/// Also manage the shared memory for the ISA buffers
class AgentISABufferManager
{
public:

    AgentISABufferManager();

    ~AgentISABufferManager();

    /// Look for a particular kernel from all the ISA buffers and return the position of the ISA buffer
    HsailAgentStatus FindIsaBufferFromKernelName(const std::string& kernelName, unsigned int& opPosition) const;

    /// Save the ISA buffer provided by the finalizer
    HsailAgentStatus AppendISABuffer();

    /// Write a ISAbuffer entry stored within the manager
    HsailAgentStatus WriteToSharedMem(const unsigned int isaBufferId) const;

    /// Write a ISAbuffer to shared memory
    HsailAgentStatus WriteToSharedMem(const AgentISABuffer& ipISABuffer) const;

private:

    /// A vector of all the isa buffer objects
    std::vector<AgentISABuffer*> m_IsaBufferList;

    /// shared mem params, the key
    int m_isaBufferShmKey;

    /// shared mem params, the allocated size
    size_t m_isaBufferShmSize;

    /// Get the next generated filename
    void GetNextFileName(std::string& outFilename) const;

    /// Disable copy constructor
    AgentISABufferManager(const AgentISABufferManager&);

    /// Disable assignment operator
    AgentISABufferManager& operator=(const AgentISABufferManager&);

};
}
